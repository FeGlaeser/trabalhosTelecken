📁 projeto/
├── 📄 index.html
├── 📄 index.css
├── 📄 editor.css
├── 📄 preview.css (se existir, ou pode criar um)
├── 📄 CNAME.txt
│
├── 📁 js/
│   ├── 📄 main.js             ← Ponto de entrada (importa todos os módulos)
│   ├── 📄 headerEditor.js     ← Funções do cabeçalho (logo, menu)
│   ├── 📄 menuEditor.js       ← Itens do menu visual
│   ├── 📄 galleryEditor.js    ← Galeria
│   ├── 📄 formEditor.js       ← Formulário
│   ├── 📄 footerEditor.js     ← Rodapé
│   ├── 📄 exportador.js       ← Funções de gerar e salvar HTML
│   ├── 📄 apiInterativa.js    ← API com entrada de usuário
│   ├── 📄 apiMultiFetch.js    ← 3 APIs via Promise.all
│
├── 📁 assets/                 ← Imagens, ícones, etc
│   └── pencil.png
│
└── 📄 README.md               ← Instruções para o professor (opcional)


oque fazer:

Trabalho 2 de JavaScript – Gerador de páginas HTML
1- Neste trabalho devem ser feitas melhorias/extensões no editor do trabalho anterior. Assim tudo
que estava funcionando no trabalho anterior deve continuar funcionando. Os requisitos do trabalho
anterior continuam valendo neste.
• O editor deve ser refatorado para funcionar como módulos (Os arquivos js devem ser
chamados como por ex:<script type="module" src="./main.js"></script>). Devem existir no
mínimo 2 módulos e devem ser usados os comandos import e export.
• Adicione mais uma seção nos controles do editor. Nesta seção o usuário deve informar
alguns dados, estes dados são enviados para uma API. Conforme os dados enviados, a API
envia a correspondente resposta. Com esta resposta crie uma nova seção na página gerada
pelo editor.
• Adicione mais uma seção nos controles do editor. Nesta seção disponibilize um botão que
ao ser clicado acesse 3 APIs (diferentes) com o comando Promisse.all. O conteúdo das
respostas das 3 apis devem ser colocados em uma nova seção na página gerada pelo editor.
• As novas seções devem estar bem integradas com as demais seções do editor (devem ter os
mesmos padrões gráficos e de código). Assim se você tinha uma aba para galeria, outra
para formulário e rodapé… agora você deve ter as seguintes abas: galeria, formulário, api
interativa, dados de apis e rodapé. Se antes você gerava uma página com cabeçalho, menu,
formulario, galeria e rodapé … agora o editor deve gerar uma página com cabeçalho, menu,
formulario, galeria, dados da API interativa, dados das APIs e rodapé
• Todas as chamadas a API devem estar protegidas por try/catch ou then/catch.
• Evite ou trate os erros das chamadas via fetch. Verifique e trate as situações em que as
chamadas podem retornar erro. Também procure evitar demais erros que possam ser
cometidos pelos usuários.
• Não repita as APIs, ou seja acesse no mínimo 4 APIs diferentes.
• Deve passar pelo validador da w3c sem erros (https://validator.w3.org/). Incluindo a parte
gerada pelo editor.
• Não deve apresentar erros pegos pelo console do JavaScript(JS) dos navegadores.
Abaixo uma lista de APIs que podem ser usadas, se conhecer e quiser utilizar outras pode
usar a vontade.
Controles Página /
Elemento
Gerado
• https://deividfortuna.github.io/fipe/ Esta API mostra dados de preços de carros vendidos no
Brasil.
• https://jsonplaceholder.typicode.com/guide/ é uma API com dados Fake para testes.
• https://swapi.dev/documentation tem uma documentação para uma api que conforme o
endereço ela retorna a correspondente informação sobre o universo Star Wars
• https://devporai.com.br/9-apis-para-seu-novo-projeto/ lista de apis
• https://github.com/public-apis/public-apis lista de APIs.
• https://brasilapi.com.br/ lista de apis de utilidade pública
O editor deve ser disponibilizado no github. O link para o repositório e o github pages do trabalho
deve ser informado no SIGAA até 06 de julho.
Não haverá apresentações em aula deste trabalho.
O trabalho deverá ser corrigido entre 7 e 8 de julho. Fiquem atentos e confiram o feedback da
correção do trabalho para que qualquer pendência ou revisão sejam feitas até 14 de julho.
Dia 21 de julho será o exame da disciplina.